!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
AddConn	tfc_net_cconn.cpp	/^ConnCache* CConnSet::AddConn(int fd, unsigned flow, bool purge) {$/;"	f	class:CConnSet
BIN	makefile	/^BIN	= ccd asn_complete.so http_complete.so dumb_complete.so$/;"	m
CCD_HEADER_LEN	tfc_net_ccd_define.h	25;"	d
CCSStat	tfc_net_cconn.h	/^	}CCSStat;$/;"	t	namespace:tfc::net
CConnSet	tfc_net_cconn.cpp	/^CConnSet::CConnSet(check_complete func, unsigned max_conn, unsigned rbsize, unsigned wbsize, close_callback close_func)$/;"	f	class:CConnSet
CConnSet	tfc_net_cconn.h	/^	class CConnSet$/;"	c	namespace:tfc::net
CEPollFlow	tfc_net_epoll_flow.h	/^			CEPollFlow() : _fd(-1), _events(NULL){}$/;"	f	class:tfc::net::CEPollFlow
CEPollFlow	tfc_net_epoll_flow.h	/^		class CEPollFlow$/;"	c	namespace:tfc::net
CEPollFlowResult	tfc_net_epoll_flow.h	/^			CEPollFlowResult(const CEPollFlowResult& right)$/;"	f	class:tfc::net::CEPollFlowResult
CEPollFlowResult	tfc_net_epoll_flow.h	/^			CEPollFlowResult(epoll_event* events, size_t size, int error = 0)$/;"	f	class:tfc::net::CEPollFlowResult
CEPollFlowResult	tfc_net_epoll_flow.h	/^		class CEPollFlowResult$/;"	c	namespace:tfc::net
CFifoSyncMQ	tfc_net_ipc_mq.cpp	/^CFifoSyncMQ::CFifoSyncMQ(CSemLockMQ& mq) : _mq(mq), _fd(-1){}$/;"	f	class:CFifoSyncMQ
CFifoSyncMQ	tfc_net_ipc_mq.h	/^	class CFifoSyncMQ$/;"	c	namespace:tfc::net
CRawCache	tfc_net_raw_cache.h	/^		struct CRawCache$/;"	s	namespace:tfc::net
CSemLockMQ	tfc_net_ipc_mq.cpp	/^CSemLockMQ::CSemLockMQ(CShmMQ& mq) : _mq(mq), _sem(NULL){}$/;"	f	class:CSemLockMQ
CSemLockMQ	tfc_net_ipc_mq.h	/^	class CSemLockMQ$/;"	c	namespace:tfc::net
CShmMQ	tfc_net_ipc_mq.cpp	/^CShmMQ::CShmMQ(){}$/;"	f	class:CShmMQ
CShmMQ	tfc_net_ipc_mq.h	/^	class CShmMQ$/;"	c	namespace:tfc::net
CSocketAddr	tfc_net_socket_tcp.cpp	/^			CSocketAddr():_len(sizeof(struct sockaddr_in))$/;"	f	class:tfc::net::CSocketAddr
CSocketAddr	tfc_net_socket_tcp.cpp	/^		class CSocketAddr$/;"	c	namespace:tfc::net	file:
CSocketTCP	tfc_net_socket_tcp.h	/^			CSocketTCP(): _socket_fd(INVALID_SOCKET), _close_protect(true){}$/;"	f	class:tfc::net::CSocketTCP
CSocketTCP	tfc_net_socket_tcp.h	/^			CSocketTCP(int fd, bool close_protect):_socket_fd(fd), _close_protect(close_protect){}$/;"	f	class:tfc::net::CSocketTCP
CSocketTCP	tfc_net_socket_tcp.h	/^		class CSocketTCP$/;"	c	namespace:tfc::net
C_HEAD_SIZE	tfc_net_ipc_mq.h	/^		static const unsigned C_HEAD_SIZE = 8;$/;"	m	class:tfc::net::CShmMQ
C_READ_BUFFER_SIZE	tfc_net_cconn.cpp	/^static const size_t C_READ_BUFFER_SIZE = 8192; $/;"	v	file:
C_TMP_BUF_LEN	tfc_net_ccd_main.cpp	/^static const unsigned C_TMP_BUF_LEN = (1<<27);  	\/\/数据缓冲区，128M              $/;"	v	file:
C_UNINIT_VALUE	tfc_net_ipc_mq.cpp	/^static const int C_UNINIT_VALUE = (1<<16) - 1;$/;"	v	file:
CheckTimeout	tfc_net_cconn.cpp	/^void CConnSet::CheckTimeout(time_t access_deadline) {$/;"	f	class:CConnSet
CloseCC	tfc_net_cconn.cpp	/^void CConnSet::CloseCC(ConnCache* cc) {$/;"	f	class:CConnSet
CloseCC	tfc_net_cconn.cpp	/^void CConnSet::CloseCC(unsigned flow) {$/;"	f	class:CConnSet
ConnCache	tfc_net_raw_cache.h	/^		struct ConnCache$/;"	s	namespace:tfc::net
E_DEQUEUE_BUF_NOT_ENOUGH	tfc_net_ipc_mq.h	/^	static const int E_DEQUEUE_BUF_NOT_ENOUGH = -13001;$/;"	v
E_FORCE_CLOSE	tfc_net_cconn.h	15;"	d
E_NEED_CLOSE	tfc_net_cconn.h	11;"	d
E_NEED_PENDING	tfc_net_cconn.h	16;"	d
E_NEED_RECV	tfc_net_cconn.h	14;"	d
E_NEED_SEND	tfc_net_cconn.h	13;"	d
E_NOT_FINDFD	tfc_net_cconn.h	12;"	d
EndStat	tfc_net_cconn.h	/^		inline void EndStat(ConnCache* cc) {$/;"	f	class:tfc::net::CConnSet
GetConnCache	tfc_net_cconn.h	/^		inline ConnCache* GetConnCache(unsigned flow) {$/;"	f	class:tfc::net::CConnSet
GetMQ	tfc_net_open_mq.cpp	/^CFifoSyncMQ* tfc::net::GetMQ(const string& conf_file)$/;"	f	class:tfc::net
GetMessage	tfc_net_cconn.cpp	/^int CConnSet::GetMessage(ConnCache* cc, void* buf, unsigned buf_size, unsigned& data_len) {$/;"	f	class:CConnSet
GetNowTick	tfc_net_cconn.h	/^		static unsigned long long GetNowTick() {$/;"	f	class:tfc::net::CConnSet
GetNowTime	tfc_net_cconn.h	/^		static struct timeval GetNowTime() {$/;"	f	class:tfc::net::CConnSet
GetStatResult	tfc_net_cconn.h	/^		inline void GetStatResult(CCSStat* stat) {$/;"	f	class:tfc::net::CConnSet
INIT_LIST_HEAD	list.h	24;"	d
INVALID_SOCKET	tfc_net_socket_tcp.h	/^			static const int INVALID_SOCKET = -1;$/;"	m	class:tfc::net::CSocketTCP
LISTEN_FLOW	tfc_net_ccd_main.cpp	28;"	d	file:
LIST_HEAD	list.h	21;"	d
LIST_HEAD_INIT	list.h	19;"	d
MAX_MQ_NUM	tfc_net_ccd_main.cpp	26;"	d	file:
MQINFO	tfc_net_ccd_main.cpp	/^}MQINFO;$/;"	t	file:
MQ_FLOW	tfc_net_ccd_main.cpp	29;"	d	file:
OBJ	makefile	/^OBJ	= ..\/old\/tfc_ipc_sv.o \\$/;"	m
Recv	tfc_net_cconn.cpp	/^int CConnSet::Recv(ConnCache* cc) {$/;"	f	class:CConnSet
RecvCC	tfc_net_cconn.cpp	/^inline int CConnSet::RecvCC(ConnCache* cc, char* buff, size_t buff_size, size_t& recvd_len) {$/;"	f	class:CConnSet
SAY	tfc_net_ccd_main.cpp	21;"	d	file:
SAY	tfc_net_ccd_main.cpp	23;"	d	file:
SEGMENT_SIZE	tfc_net_cconn.h	18;"	d
SOCK_FLOW_MIN	tfc_net_ccd_main.cpp	30;"	d	file:
Send	tfc_net_cconn.cpp	/^int CConnSet::Send(ConnCache* cc, const char* sData, size_t iDataLen) {$/;"	f	class:CConnSet
SendCC	tfc_net_cconn.cpp	/^inline int CConnSet::SendCC(ConnCache* cc, const char* sData, size_t iDataLen, size_t& sent_len) {$/;"	f	class:CConnSet
SendForce	tfc_net_cconn.cpp	/^int CConnSet::SendForce(ConnCache* cc, const char* sData, size_t iDataLen) {$/;"	f	class:CConnSet
SendFromCache	tfc_net_cconn.cpp	/^int CConnSet::SendFromCache(ConnCache* cc) {$/;"	f	class:CConnSet
SetSpeedLimit	tfc_net_cconn.cpp	/^void CConnSet::SetSpeedLimit(unsigned download_speed, unsigned upload_speed) {$/;"	f	class:CConnSet
StartStat	tfc_net_cconn.h	/^		inline void StartStat(ConnCache* cc) {$/;"	f	class:tfc::net::CConnSet
TCCDHeader	tfc_net_ccd_define.h	/^}TCCDHeader;$/;"	t
TFC_NET_CCD_DEFINE_H__	tfc_net_ccd_define.h	2;"	d
TFifoSyncMQStat	tfc_net_ipc_mq.h	/^		}TFifoSyncMQStat;$/;"	t	class:tfc::net::CFifoSyncMQ
TMQStat	tfc_net_ipc_mq.h	/^		}TMQStat;$/;"	t	class:tfc::net::CShmMQ
TSemLockMQStat	tfc_net_ipc_mq.h	/^		}TSemLockMQStat;$/;"	t	class:tfc::net::CSemLockMQ
TryCloseCC	tfc_net_cconn.cpp	/^int CConnSet::TryCloseCC(ConnCache* cc) {$/;"	f	class:CConnSet
TryCloseCC	tfc_net_cconn.cpp	/^int CConnSet::TryCloseCC(unsigned flow) {$/;"	f	class:CConnSet
Watch	tfc_net_cconn.cpp	/^void CConnSet::Watch(unsigned cc_timeout, unsigned cc_stattime) {$/;"	f	class:CConnSet
_BUF_LEN	tfc_net_ccd_main.cpp	/^static unsigned _BUF_LEN = C_TMP_BUF_LEN - CCD_HEADER_LEN;	\/\/可容纳最大消息体长度$/;"	v	file:
_LIST_H_	list.h	2;"	d
_MYDAEMON_H_	mydaemon.h	2;"	d
_TCP_NET_CCONN_H_	tfc_net_cconn.h	2;"	d
_TFC_NET_EPOLL_FLOW_H_	tfc_net_epoll_flow.h	2;"	d
_TFC_NET_IPC_MQ_H_	tfc_net_ipc_mq.h	3;"	d
_TFC_NET_OPEN_MQ_H_	tfc_net_open_mq.h	3;"	d
_TFC_NET_RAW_CACHE_H_	tfc_net_raw_cache.h	3;"	d
_TFC_NET_SOCKET_TCP_H_	tfc_net_socket_tcp.h	2;"	d
__list_add	list.h	/^static inline void __list_add(struct list_head *new1,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
__list_for_each	list.h	197;"	d
__list_for_each_prev	list.h	209;"	d
__list_splice	list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
_access	tfc_net_raw_cache.h	/^			time_t _access;$/;"	m	struct:tfc::net::ConnCache
_active	tfc_net_ccd_main.cpp	/^	bool _active;$/;"	m	file:
_addr	tfc_net_socket_tcp.cpp	/^				struct sockaddr_in _addr;$/;"	m	class:tfc::net::CSocketAddr	file:
_avg_time	tfc_net_cconn.h	/^		unsigned _avg_time;						\/\/处理消息平均时间$/;"	m	struct:tfc::net::<anonymous>
_block	tfc_net_ipc_mq.h	/^		char* _block;$/;"	m	class:tfc::net::CShmMQ
_block_size	tfc_net_ipc_mq.h	/^		unsigned _block_size;$/;"	m	class:tfc::net::CShmMQ
_buf	tfc_net_ccd_main.cpp	/^static char* _buf = (char*)tmp_buffer + CCD_HEADER_LEN; 	\/\/ccd->mcd 消息消息体$/;"	v	file:
_buff_size	tfc_net_raw_cache.h	/^			unsigned _buff_size;$/;"	m	struct:tfc::net::CRawCache
_close_func	tfc_net_cconn.h	/^		close_callback _close_func;	\/\/连接关闭回调函数$/;"	m	class:tfc::net::CConnSet
_close_protect	tfc_net_socket_tcp.h	/^			bool _close_protect;$/;"	m	class:tfc::net::CSocketTCP
_connstatus	tfc_net_raw_cache.h	/^					unsigned _connstatus:5;$/;"	m	struct:tfc::net::ConnCache::<anonymous>::<anonymous>
_data	tfc_net_raw_cache.h	/^			char* _data;$/;"	m	struct:tfc::net::CRawCache
_deadline_tick	tfc_net_raw_cache.h	/^			unsigned long long _deadline_tick;$/;"	m	struct:tfc::net::ConnCache
_download_ticks	tfc_net_cconn.h	/^		unsigned _download_ticks; 	\/\/发送SEGMENT_SIZE字节最少需要的tick数目$/;"	m	class:tfc::net::CConnSet
_errno	tfc_net_epoll_flow.h	/^			int _errno;$/;"	m	class:tfc::net::CEPollFlowResult
_events	tfc_net_epoll_flow.h	/^			epoll_event* _events;$/;"	m	class:tfc::net::CEPollFlow
_events	tfc_net_epoll_flow.h	/^			epoll_event* _events;$/;"	m	class:tfc::net::CEPollFlowResult
_fd	tfc_net_epoll_flow.h	/^			int _fd;$/;"	m	class:tfc::net::CEPollFlow
_fd	tfc_net_ipc_mq.h	/^		int _fd;$/;"	m	class:tfc::net::CFifoSyncMQ
_fd	tfc_net_raw_cache.h	/^			int _fd;$/;"	m	struct:tfc::net::ConnCache
_finclose	tfc_net_raw_cache.h	/^					unsigned _finclose:1;$/;"	m	struct:tfc::net::ConnCache::<anonymous>::<anonymous>
_flag	tfc_net_raw_cache.h	/^				unsigned _flag;$/;"	m	union:tfc::net::ConnCache::<anonymous>
_flow	tfc_net_raw_cache.h	/^			unsigned _flow;$/;"	m	struct:tfc::net::ConnCache
_flow_2_rc	tfc_net_cconn.h	/^		ConnCache** _flow_2_rc;		\/\/flow到连接的映射$/;"	m	class:tfc::net::CConnSet
_free_len	tfc_net_ipc_mq.h	/^			unsigned _free_len;$/;"	m	struct:tfc::net::CShmMQ::tagMQStat
_free_rcs	tfc_net_cconn.h	/^		list_head_t _free_rcs;		\/\/空闲连接链表$/;"	m	class:tfc::net::CConnSet
_func	tfc_net_cconn.h	/^		check_complete _func;$/;"	m	class:tfc::net::CConnSet
_head	tfc_net_ipc_mq.h	/^		unsigned* _head;$/;"	m	class:tfc::net::CShmMQ
_index	tfc_net_epoll_flow.h	/^				size_t _index;$/;"	m	class:tfc::net::CEPollFlowResult::iterator
_ip	tfc_net_ccd_define.h	/^    unsigned int	_ip;$/;"	m
_ip	tfc_net_raw_cache.h	/^			unsigned _ip;$/;"	m	struct:tfc::net::ConnCache
_len	tfc_net_raw_cache.h	/^			unsigned _len;$/;"	m	struct:tfc::net::CRawCache
_len	tfc_net_socket_tcp.cpp	/^				socklen_t _len;$/;"	m	class:tfc::net::CSocketAddr	file:
_maxFD	tfc_net_epoll_flow.h	/^			size_t _maxFD;$/;"	m	class:tfc::net::CEPollFlow
_max_conn	tfc_net_cconn.h	/^		unsigned _max_conn;			\/\/最大连接数$/;"	m	class:tfc::net::CConnSet
_max_time	tfc_net_cconn.h	/^		unsigned _max_time;						\/\/处理消息最大时间$/;"	m	struct:tfc::net::<anonymous>
_min_time	tfc_net_cconn.h	/^		unsigned _min_time;						\/\/处理消息最小时间$/;"	m	struct:tfc::net::<anonymous>
_mq	tfc_net_ccd_main.cpp	/^	CFifoSyncMQ* _mq;$/;"	m	file:
_mq	tfc_net_ipc_mq.h	/^		CSemLockMQ& _mq;$/;"	m	class:tfc::net::CFifoSyncMQ
_mq	tfc_net_ipc_mq.h	/^		CShmMQ& _mq;$/;"	m	class:tfc::net::CSemLockMQ
_mq_stat	tfc_net_ipc_mq.h	/^			CShmMQ::TMQStat _mq_stat;$/;"	m	struct:tfc::net::CSemLockMQ::tagSemLockMQStat
_msg_count	tfc_net_cconn.h	/^		unsigned _msg_count;					\/\/消息数目$/;"	m	struct:tfc::net::<anonymous>
_next	tfc_net_raw_cache.h	/^			list_head_t _next;$/;"	m	struct:tfc::net::ConnCache
_nowtime	tfc_net_cconn.cpp	/^struct timeval CConnSet::_nowtime;$/;"	m	class:CConnSet	file:
_nowtime	tfc_net_cconn.h	/^		static struct timeval _nowtime;	\/\/当前时间$/;"	m	class:tfc::net::CConnSet
_offset	tfc_net_raw_cache.h	/^			unsigned _offset;$/;"	m	struct:tfc::net::CRawCache
_pending_recv	tfc_net_cconn.h	/^		list_head_t _pending_recv;$/;"	m	class:tfc::net::CConnSet
_pending_send	tfc_net_cconn.h	/^		list_head_t _pending_send;$/;"	m	class:tfc::net::CConnSet
_port	tfc_net_ccd_define.h	/^    unsigned short  _port;$/;"	m
_port	tfc_net_raw_cache.h	/^			unsigned _port;$/;"	m	struct:tfc::net::ConnCache
_r	tfc_net_raw_cache.h	/^			struct CRawCache _r;		\/\/读池$/;"	m	struct:tfc::net::ConnCache
_rcs	tfc_net_cconn.h	/^		ConnCache* _rcs;			\/\/连接集合数组$/;"	m	class:tfc::net::CConnSet
_recv_buff_size	tfc_net_cconn.h	/^		unsigned _recv_buff_size;	\/\/接收缓冲区大小$/;"	m	class:tfc::net::CConnSet
_reqmqidx	tfc_net_raw_cache.h	/^					unsigned _reqmqidx:4;$/;"	m	struct:tfc::net::ConnCache::<anonymous>::<anonymous>
_res	tfc_net_epoll_flow.h	/^				CEPollFlowResult& _res;$/;"	m	class:tfc::net::CEPollFlowResult::iterator
_rlock	tfc_net_ipc_mq.h	/^		int _rlock;$/;"	m	class:tfc::net::CSemLockMQ
_sem	tfc_net_ipc_mq.h	/^		sem_t* _sem;$/;"	m	class:tfc::net::CSemLockMQ
_semlockmq_stat	tfc_net_ipc_mq.h	/^			CSemLockMQ::TSemLockMQStat _semlockmq_stat;$/;"	m	struct:tfc::net::CFifoSyncMQ::tagFifoSyncMQStat
_send_buff_size	tfc_net_cconn.h	/^		unsigned _send_buff_size;	\/\/发送缓冲区大小$/;"	m	class:tfc::net::CConnSet
_shm	tfc_net_ipc_mq.h	/^		tfc::ptr<tfc::ipc::CShm> _shm;$/;"	m	class:tfc::net::CShmMQ
_shm_id	tfc_net_ipc_mq.h	/^			unsigned _shm_id;$/;"	m	struct:tfc::net::CShmMQ::tagMQStat
_shm_key	tfc_net_ipc_mq.h	/^			unsigned _shm_key;$/;"	m	struct:tfc::net::CShmMQ::tagMQStat
_shm_size	tfc_net_ipc_mq.h	/^			unsigned _shm_size;$/;"	m	struct:tfc::net::CShmMQ::tagMQStat
_size	tfc_net_epoll_flow.h	/^			size_t _size;$/;"	m	class:tfc::net::CEPollFlowResult
_size	tfc_net_raw_cache.h	/^			unsigned _size;$/;"	m	struct:tfc::net::CRawCache
_socket_fd	tfc_net_socket_tcp.h	/^			int _socket_fd;$/;"	m	class:tfc::net::CSocketTCP
_start_time	tfc_net_raw_cache.h	/^			timeval _start_time;$/;"	m	struct:tfc::net::ConnCache
_stat	tfc_net_cconn.h	/^		CCSStat _stat;		$/;"	m	class:tfc::net::CConnSet
_tail	tfc_net_ipc_mq.h	/^		unsigned* _tail;$/;"	m	class:tfc::net::CShmMQ
_total_len	tfc_net_ipc_mq.h	/^			unsigned _total_len;$/;"	m	struct:tfc::net::CShmMQ::tagMQStat
_total_recv_size	tfc_net_cconn.h	/^		unsigned long long _total_recv_size; 	\/\/接收字节数$/;"	m	struct:tfc::net::<anonymous>
_total_send_size	tfc_net_cconn.h	/^		unsigned long long _total_send_size;	\/\/发送字节数$/;"	m	struct:tfc::net::<anonymous>
_total_time	tfc_net_cconn.h	/^		unsigned long long _total_time;			\/\/处理消息总时间$/;"	m	struct:tfc::net::<anonymous>
_type	tfc_net_ccd_define.h	/^    unsigned short	_type;$/;"	m
_upload_ticks	tfc_net_cconn.h	/^		unsigned _upload_ticks;		\/\/接收SEGMENT_SIZE字节最少需要的tick数目$/;"	m	class:tfc::net::CConnSet
_used_len	tfc_net_ipc_mq.h	/^			unsigned _used_len;$/;"	m	struct:tfc::net::CShmMQ::tagMQStat
_used_rcs	tfc_net_cconn.h	/^		list_head_t _used_rcs;		\/\/试用中连接链表$/;"	m	class:tfc::net::CConnSet
_w	tfc_net_raw_cache.h	/^			struct CRawCache _w;		\/\/写池$/;"	m	struct:tfc::net::ConnCache
_wait_sec	tfc_net_ipc_mq.h	/^			unsigned _wait_sec;$/;"	m	struct:tfc::net::CFifoSyncMQ::tagFifoSyncMQStat
_wait_sec	tfc_net_ipc_mq.h	/^		unsigned _wait_sec;$/;"	m	class:tfc::net::CFifoSyncMQ
_wait_usec	tfc_net_ipc_mq.h	/^			unsigned _wait_usec;$/;"	m	struct:tfc::net::CFifoSyncMQ::tagFifoSyncMQStat
_wait_usec	tfc_net_ipc_mq.h	/^		unsigned _wait_usec;$/;"	m	class:tfc::net::CFifoSyncMQ
_wlock	tfc_net_ipc_mq.h	/^		int _wlock;$/;"	m	class:tfc::net::CSemLockMQ
accept	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::accept(CSocketTCP & client_socket)$/;"	f	class:tfc::net::CSocketTCP
acceptor	tfc_net_ccd_main.cpp	/^static CSocketTCP acceptor;				\/\/tcp侦听对象$/;"	v	file:
add	tfc_net_epoll_flow.h	/^			int add(int fd, unsigned flow, int flag)$/;"	f	class:tfc::net::CEPollFlow
addr	tfc_net_socket_tcp.cpp	/^			struct sockaddr * addr(){return (struct sockaddr *)(&_addr);}$/;"	f	class:tfc::net::CSocketAddr
addr_in	tfc_net_socket_tcp.cpp	/^			struct sockaddr_in * addr_in(){return &_addr;}$/;"	f	class:tfc::net::CSocketAddr
append	tfc_net_raw_cache.cpp	/^void CRawCache::append(const char* data, size_t data_len) {$/;"	f	class:CRawCache
asn_complete_func	asn_complete.cpp	/^int asn_complete_func(const void* data, unsigned data_len)$/;"	f
attach	tfc_net_socket_tcp.h	/^			void attach(int fd){if (_close_protect){close();_close_protect = true;} _socket_fd = fd;}$/;"	f	class:tfc::net::CSocketTCP
begin	tfc_net_epoll_flow.h	/^			iterator begin(){return CEPollFlowResult::iterator(0, *this);}$/;"	f	class:tfc::net::CEPollFlowResult
bind	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::bind(const string &server_address, port_t port)$/;"	f	class:tfc::net::CSocketTCP
bind_any	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::bind_any(port_t port)$/;"	f	class:tfc::net::CSocketTCP
bind_if	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::bind_if(const string &ifname, port_t port)$/;"	f	class:tfc::net::CSocketTCP
cc_func	tfc_net_ccd_main.cpp	/^static check_complete cc_func = NULL;	\/\/包完整性检查$/;"	v	file:
ccd_header	tfc_net_ccd_main.cpp	/^static TCCDHeader* ccd_header = (TCCDHeader*)tmp_buffer;	\/\/ccd->mcd 消息包头部$/;"	v	file:
ccd_req_disconnect	tfc_net_ccd_define.h	/^	ccd_req_disconnect		= 10,	\/\/通知连接断裂, enqueue_mq 的数据为 header 或者 size=0 的包$/;"	e	enum:ccd_reqrsp_type
ccd_reqrsp_type	tfc_net_ccd_define.h	/^enum ccd_reqrsp_type$/;"	g
ccd_rsp_connect	tfc_net_ccd_define.h	/^	ccd_rsp_connect			= 1,\/\/有主机连接, enqueue_mq 的数据为 header$/;"	e	enum:ccd_reqrsp_type
ccd_rsp_data	tfc_net_ccd_define.h	/^	ccd_rsp_data			,	\/\/ccd 发数据来, enqueue_mq 的数据为 header + data$/;"	e	enum:ccd_reqrsp_type
ccd_rsp_disconnect	tfc_net_ccd_define.h	/^	ccd_rsp_disconnect		,	\/\/有主机断开连接, enqueue_mq 的数据为 header$/;"	e	enum:ccd_reqrsp_type
ccd_rsp_error	tfc_net_ccd_define.h	/^	ccd_rsp_error			,	\/\/有错误发生，原因不明，待查$/;"	e	enum:ccd_reqrsp_type
ccd_rsp_recv_fail	tfc_net_ccd_define.h	/^	ccd_rsp_recv_fail		,	\/\/接收数据失败, enqueue_mq 的数据为 header$/;"	e	enum:ccd_reqrsp_type
ccd_rsp_send_fail	tfc_net_ccd_define.h	/^	ccd_rsp_send_fail		,	\/\/发送数据失败, enqueue_mq 的数据为 header$/;"	e	enum:ccd_reqrsp_type
ccd_rsp_send_nearly_ok	tfc_net_ccd_define.h	/^	ccd_rsp_send_nearly_ok	,	\/\/几乎发送数据成功(比如剩20k), enqueue_mq 的数据为 header$/;"	e	enum:ccd_reqrsp_type
ccd_rsp_send_ok	tfc_net_ccd_define.h	/^	ccd_rsp_send_ok			,	\/\/发送数据成功, enqueue_mq 的数据为 header$/;"	e	enum:ccd_reqrsp_type
ccs	tfc_net_ccd_main.cpp	/^static CConnSet* ccs = NULL;			\/\/连接池$/;"	v	file:
check_complete	tfc_net_cconn.h	/^	typedef int (*check_complete)(void* data, unsigned data_len);$/;"	t	namespace:tfc::net
clear_flag	tfc_net_ipc_mq.cpp	/^void CFifoSyncMQ::clear_flag() {$/;"	f	class:CFifoSyncMQ
close	tfc_net_socket_tcp.cpp	/^		void CSocketTCP::close()$/;"	f	class:tfc::net::CSocketTCP
close_callback	tfc_net_cconn.h	/^	typedef void (*close_callback)(ConnCache* cc);$/;"	t	namespace:tfc::net
compiling_date	version.cpp	/^char compiling_date[] = "build date: "__DATE__;$/;"	v
connect	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::connect(const string& address, port_t port)$/;"	f	class:tfc::net::CSocketTCP
connect	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::connect(ip_4byte_t address, port_t port)$/;"	f	class:tfc::net::CSocketTCP
create	tfc_net_epoll_flow.cpp	/^int CEPollFlow::create(size_t iMaxFD)$/;"	f	class:CEPollFlow
create	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::create()$/;"	f	class:tfc::net::CSocketTCP
ctl	tfc_net_epoll_flow.cpp	/^int CEPollFlow::ctl(int fd, unsigned flow, int epollAction, int flag)$/;"	f	class:CEPollFlow
data	tfc_net_raw_cache.h	/^			inline char* data()$/;"	f	struct:tfc::net::CRawCache
data_len	tfc_net_raw_cache.h	/^			inline unsigned data_len()$/;"	f	struct:tfc::net::CRawCache
dequeue	tfc_net_ipc_mq.cpp	/^int CFifoSyncMQ::dequeue(void* buf, unsigned buf_size, unsigned& data_len, unsigned& flow) {$/;"	f	class:CFifoSyncMQ
dequeue	tfc_net_ipc_mq.cpp	/^int CSemLockMQ::dequeue(void* buf, unsigned buf_size, unsigned& data_len, unsigned& flow) {$/;"	f	class:CSemLockMQ
dequeue	tfc_net_ipc_mq.cpp	/^int CShmMQ::dequeue(void* buf, unsigned buf_size, unsigned& data_len, unsigned& flow) {$/;"	f	class:CShmMQ
detach	tfc_net_socket_tcp.h	/^			void detach(){_close_protect = false;}$/;"	f	class:tfc::net::CSocketTCP
end	tfc_net_epoll_flow.h	/^			iterator end(){return CEPollFlowResult::iterator(_size, *this);}$/;"	f	class:tfc::net::CEPollFlowResult
enqueue	tfc_net_ipc_mq.cpp	/^int CFifoSyncMQ::enqueue(const void* data, unsigned data_len, unsigned flow) {$/;"	f	class:CFifoSyncMQ
enqueue	tfc_net_ipc_mq.cpp	/^int CSemLockMQ::enqueue(const void* data, unsigned data_len, unsigned flow) {$/;"	f	class:CSemLockMQ
enqueue	tfc_net_ipc_mq.cpp	/^int CShmMQ::enqueue(const void* data, unsigned data_len, unsigned flow) {$/;"	f	class:CShmMQ
epev	tfc_net_ccd_main.cpp	/^static struct epoll_event* epev = NULL;	\/\/epoll事件数组$/;"	v	file:
epfd	tfc_net_ccd_main.cpp	/^static int epfd = -1;					\/\/epoll句柄$/;"	v	file:
epoll_add	tfc_net_epoll_flow.h	/^		inline void epoll_add(int epfd, int fd, unsigned flow, int events) {$/;"	f	namespace:tfc::net
epoll_del	tfc_net_epoll_flow.h	/^		inline void epoll_del(int epfd, int fd) {$/;"	f	namespace:tfc::net
epoll_mod	tfc_net_epoll_flow.h	/^		inline void epoll_mod(int epfd, int fd, unsigned flow, int events) {$/;"	f	namespace:tfc::net
error	tfc_net_epoll_flow.h	/^			int error(){return _errno;}$/;"	f	class:tfc::net::CEPollFlowResult
event_notify	tfc_net_ccd_main.cpp	/^static bool event_notify = false;		\/\/true，则CCD发送连接建立、断开等通知给MCD，否则不发送  $/;"	v	file:
family_t	tfc_net_socket_tcp.cpp	/^		typedef sa_family_t family_t;		\/\/	IF_INET$/;"	t	namespace:tfc::net	file:
fd	tfc_net_epoll_flow.cpp	/^int CEPollFlowResult::iterator::fd()$/;"	f	class:CEPollFlowResult::iterator
fd	tfc_net_ipc_mq.h	/^		int fd(){ return _fd; };$/;"	f	class:tfc::net::CFifoSyncMQ
fd	tfc_net_socket_tcp.h	/^			inline int fd() const {return _socket_fd;};$/;"	f	class:tfc::net::CSocketTCP
flow	tfc_net_epoll_flow.cpp	/^unsigned CEPollFlowResult::iterator::flow()$/;"	f	class:CEPollFlowResult::iterator
get_family	tfc_net_socket_tcp.cpp	/^			family_t get_family(){return _addr.sin_family;}$/;"	f	class:tfc::net::CSocketAddr
get_ip_by_if	tfc_net_socket_tcp.cpp	/^		unsigned CSocketTCP::get_ip_by_if(const char* ifname)$/;"	f	class:tfc::net::CSocketTCP
get_numeric_ipv4	tfc_net_socket_tcp.cpp	/^			ip_4byte_t get_numeric_ipv4(){return _addr.sin_addr.s_addr;}$/;"	f	class:tfc::net::CSocketAddr
get_peer_name	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::get_peer_name(ip_4byte_t& peer_address, port_t& peer_port)$/;"	f	class:tfc::net::CSocketTCP
get_peer_name	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::get_peer_name(string & peer_address, port_t & peer_port)$/;"	f	class:tfc::net::CSocketTCP
get_port	tfc_net_socket_tcp.cpp	/^			port_t get_port(){return ntohs(_addr.sin_port);}$/;"	f	class:tfc::net::CSocketAddr
get_size	tfc_net_epoll_flow.h	/^			inline size_t get_size() {return _size;} \/\/ added by unique.$/;"	f	class:tfc::net::CEPollFlowResult
get_sock_name	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::get_sock_name(ip_4byte_t& socket_address, port_t & socket_port)$/;"	f	class:tfc::net::CSocketTCP
get_sock_name	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::get_sock_name(string & socket_address, port_t & socket_port)$/;"	f	class:tfc::net::CSocketTCP
get_stat	tfc_net_ipc_mq.h	/^		void get_stat(TFifoSyncMQStat& mq_stat)$/;"	f	class:tfc::net::CFifoSyncMQ
get_stat	tfc_net_ipc_mq.h	/^		void get_stat(TMQStat& mq_stat)$/;"	f	class:tfc::net::CShmMQ
get_stat	tfc_net_ipc_mq.h	/^		void get_stat(TSemLockMQStat& mq_stat)$/;"	f	class:tfc::net::CSemLockMQ
handle_accept	tfc_net_ccd_main.cpp	/^void handle_accept(int listenfd) {$/;"	f
handle_cc_close	tfc_net_ccd_main.cpp	/^void handle_cc_close(ConnCache* cc) {$/;"	f
handle_pending	tfc_net_ccd_main.cpp	/^void handle_pending() {$/;"	f
handle_rsp_mq	tfc_net_ccd_main.cpp	/^void handle_rsp_mq(int mqfd, bool is_epoll_event = true) {$/;"	f
handle_socket	tfc_net_ccd_main.cpp	/^void handle_socket(int eventfd, struct epoll_event* ev) {$/;"	f
handle_socket_recv	tfc_net_ccd_main.cpp	/^inline bool handle_socket_recv(ConnCache* cc) {$/;"	f
handle_socket_send	tfc_net_ccd_main.cpp	/^inline bool handle_socket_send(ConnCache* cc, const char* data, unsigned data_len) {$/;"	f
in_n2s	tfc_net_socket_tcp.cpp	/^		string CSocketAddr::in_n2s(ip_4byte_t addr)$/;"	f	class:tfc::net::CSocketAddr
in_s2n	tfc_net_socket_tcp.cpp	/^		int CSocketAddr::in_s2n(const string& addr, ip_4byte_t& addr_4byte)$/;"	f	class:tfc::net::CSocketAddr
init	tfc_net_ipc_mq.cpp	/^int CFifoSyncMQ::init(const std::string& fifo_path, unsigned wait_sec, unsigned wait_usec) {$/;"	f	class:CFifoSyncMQ
init	tfc_net_ipc_mq.cpp	/^int CSemLockMQ::init(const char* sem_name, int rlock,int wlock) {$/;"	f	class:CSemLockMQ
init	tfc_net_ipc_mq.cpp	/^int CShmMQ::init(int shm_key, unsigned shm_size) {$/;"	f	class:CShmMQ
init_mq_conf	tfc_net_ccd_main.cpp	/^void init_mq_conf(CFileConfig& page, bool is_req) {$/;"	f
ip_4byte_t	tfc_net_socket_tcp.h	/^		typedef in_addr_t ip_4byte_t;	\/\/	unsigned int$/;"	t	namespace:tfc::net
iterator	tfc_net_epoll_flow.h	/^				iterator(const iterator& right)$/;"	f	class:tfc::net::CEPollFlowResult::iterator
iterator	tfc_net_epoll_flow.h	/^				iterator(size_t index, CEPollFlowResult& res)$/;"	f	class:tfc::net::CEPollFlowResult::iterator
iterator	tfc_net_epoll_flow.h	/^			class iterator$/;"	c	class:tfc::net::CEPollFlowResult
length	tfc_net_socket_tcp.cpp	/^			socklen_t& length(){return _len;}$/;"	f	class:tfc::net::CSocketAddr
list_add	list.h	/^static inline void list_add(struct list_head *new1, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new1, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(struct list_head *head)$/;"	f
list_entry	list.h	184;"	d
list_for_each	list.h	192;"	d
list_for_each_entry	list.h	229;"	d
list_for_each_entry_safe	list.h	244;"	d
list_for_each_entry_safe_l	list.h	250;"	d
list_for_each_prev	list.h	204;"	d
list_for_each_safe	list.h	219;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_head_t	list.h	/^typedef struct list_head list_head_t;$/;"	t
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_splice	list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
listen	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::listen()$/;"	f	class:tfc::net::CSocketTCP
main	tfc_net_ccd_main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
modify	tfc_net_epoll_flow.h	/^			int modify(int fd, unsigned flow, int flag)$/;"	f	class:tfc::net::CEPollFlow
mq_mapping	tfc_net_ccd_main.cpp	/^static MQINFO mq_mapping[1<<6];			\/\/fd->mq映射$/;"	v	file:
mq_mapping_max	tfc_net_ccd_main.cpp	/^static int mq_mapping_max = 0;			\/\/rsp_mq fd max$/;"	v	file:
mq_mapping_min	tfc_net_ccd_main.cpp	/^static int mq_mapping_min = INT_MAX;	\/\/rsp_mq fd min$/;"	v	file:
mydaemon	mydaemon.cpp	/^void mydaemon(const char* name) {$/;"	f
net	tfc_net_cconn.h	/^namespace tfc{namespace net$/;"	n	namespace:tfc
net	tfc_net_epoll_flow.h	/^	namespace net$/;"	n	namespace:tfc
net	tfc_net_ipc_mq.h	/^namespace tfc{namespace net$/;"	n	namespace:tfc
net	tfc_net_open_mq.h	/^namespace tfc {	namespace net {$/;"	n	namespace:tfc
net	tfc_net_raw_cache.h	/^	namespace net$/;"	n	namespace:tfc
net	tfc_net_socket_tcp.cpp	/^	namespace net$/;"	n	namespace:tfc	file:
net	tfc_net_socket_tcp.h	/^	namespace net$/;"	n	namespace:tfc
net_complete_func	dumb_complete.cpp	/^	int net_complete_func(const void* data, unsigned data_len)$/;"	f
net_complete_func	http_complete.cpp	/^	int net_complete_func(const void* data, unsigned data_len)$/;"	f
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head
operator !=	tfc_net_epoll_flow.h	/^				bool operator !=(const iterator& right)$/;"	f	class:tfc::net::CEPollFlowResult::iterator
operator ++	tfc_net_epoll_flow.h	/^				iterator& operator ++(){_index++; return *this;}$/;"	f	class:tfc::net::CEPollFlowResult::iterator
operator ++	tfc_net_epoll_flow.h	/^				iterator& operator ++(int){_index++; return *this;}$/;"	f	class:tfc::net::CEPollFlowResult::iterator
operator ->	tfc_net_epoll_flow.h	/^				epoll_event* operator->(){return &_res._events[_index];}$/;"	f	class:tfc::net::CEPollFlowResult::iterator
operator =	tfc_net_epoll_flow.h	/^			CEPollFlowResult& operator=(const CEPollFlowResult& right)$/;"	f	class:tfc::net::CEPollFlowResult
operator ==	tfc_net_epoll_flow.h	/^				bool operator ==(const iterator& right)$/;"	f	class:tfc::net::CEPollFlowResult::iterator
pload_grid	tfc_net_ccd_main.cpp	/^static CLoadGrid* pload_grid = NULL;	\/\/负载检测$/;"	v	file:
port_t	tfc_net_socket_tcp.h	/^		typedef uint16_t port_t;		\/\/	unsigned short$/;"	t	namespace:tfc::net
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head
receive	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::receive(void *buf, size_t buf_size$/;"	f	class:tfc::net::CSocketTCP
reinit	tfc_net_raw_cache.cpp	/^void CRawCache::reinit() {$/;"	f	class:CRawCache
req_mq	tfc_net_ccd_main.cpp	/^static CFifoSyncMQ* req_mq[MAX_MQ_NUM];	\/\/ccd->mcd mq$/;"	v	file:
req_mq_num	tfc_net_ccd_main.cpp	/^static unsigned req_mq_num;				\/\/req_mq数目	$/;"	v	file:
rsp_mq	tfc_net_ccd_main.cpp	/^static CFifoSyncMQ* rsp_mq[MAX_MQ_NUM];	\/\/mcd->ccd mq$/;"	v	file:
rsp_mq_num	tfc_net_ccd_main.cpp	/^static unsigned rsp_mq_num;				\/\/rsp_mq数目$/;"	v	file:
select_fifo	tfc_net_ipc_mq.cpp	/^int CFifoSyncMQ::select_fifo() {$/;"	f	class:CFifoSyncMQ
send	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::send(const void *buf, size_t buf_size$/;"	f	class:tfc::net::CSocketTCP
set_family	tfc_net_socket_tcp.cpp	/^			void set_family(family_t f){_addr.sin_family = f;}$/;"	f	class:tfc::net::CSocketAddr
set_nonblock	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::set_nonblock()$/;"	f	class:tfc::net::CSocketTCP
set_numeric_ipv4	tfc_net_socket_tcp.cpp	/^			void set_numeric_ipv4(ip_4byte_t ip){_addr.sin_addr.s_addr = ip;}$/;"	f	class:tfc::net::CSocketAddr
set_port	tfc_net_socket_tcp.cpp	/^			void set_port(port_t port){_addr.sin_port = htons(port);}$/;"	f	class:tfc::net::CSocketAddr
set_reuseaddr	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::set_reuseaddr()$/;"	f	class:tfc::net::CSocketTCP
shutdown	tfc_net_socket_tcp.cpp	/^		int CSocketTCP::shutdown()$/;"	f	class:tfc::net::CSocketTCP
sigterm_handler	mydaemon.cpp	/^static void sigterm_handler(int signo) {$/;"	f	file:
skip	tfc_net_raw_cache.cpp	/^void CRawCache::skip(unsigned length) {$/;"	f	class:CRawCache
socket_is_ok	tfc_net_socket_tcp.h	/^			bool socket_is_ok() const {return (_socket_fd != INVALID_SOCKET);}$/;"	f	class:tfc::net::CSocketTCP
stat_time	tfc_net_ccd_main.cpp	/^static unsigned stat_time = 300;		\/\/profile统计间隔时间$/;"	v	file:
stop	mydaemon.cpp	/^bool stop = false;$/;"	v
tagFifoSyncMQStat	tfc_net_ipc_mq.h	/^		typedef struct tagFifoSyncMQStat$/;"	s	class:tfc::net::CFifoSyncMQ
tagMQStat	tfc_net_ipc_mq.h	/^		typedef struct tagMQStat$/;"	s	class:tfc::net::CShmMQ
tagSemLockMQStat	tfc_net_ipc_mq.h	/^		typedef struct tagSemLockMQStat$/;"	s	class:tfc::net::CSemLockMQ
tfc	tfc_net_cconn.h	/^namespace tfc{namespace net$/;"	n
tfc	tfc_net_epoll_flow.h	/^namespace tfc$/;"	n
tfc	tfc_net_ipc_mq.h	/^namespace tfc{namespace net$/;"	n
tfc	tfc_net_open_mq.h	/^namespace tfc {	namespace net {$/;"	n
tfc	tfc_net_raw_cache.h	/^namespace tfc$/;"	n
tfc	tfc_net_socket_tcp.cpp	/^namespace tfc$/;"	n	file:
tfc	tfc_net_socket_tcp.h	/^namespace tfc$/;"	n
time_out	tfc_net_ccd_main.cpp	/^static unsigned time_out = 60;			\/\/连接超时时间$/;"	v	file:
tmp_buffer	tfc_net_ccd_main.cpp	/^static char tmp_buffer[C_TMP_BUF_LEN];				\/\/头部+数据的buf$/;"	v	file:
try_dequeue	tfc_net_ipc_mq.cpp	/^int CFifoSyncMQ::try_dequeue(void* buf, unsigned buf_size, unsigned& data_len, unsigned& flow) {$/;"	f	class:CFifoSyncMQ
version_string	version.cpp	/^char version_string[] = "version   : 2.0.0";$/;"	v
wait	tfc_net_epoll_flow.cpp	/^CEPollFlowResult CEPollFlow::wait(int iTimeout)$/;"	f	class:CEPollFlow
~CConnSet	tfc_net_cconn.cpp	/^CConnSet::~CConnSet() {$/;"	f	class:CConnSet
~CEPollFlow	tfc_net_epoll_flow.h	/^			~CEPollFlow(){if (_events) delete[] _events;}$/;"	f	class:tfc::net::CEPollFlow
~CEPollFlowResult	tfc_net_epoll_flow.h	/^			~CEPollFlowResult(){}$/;"	f	class:tfc::net::CEPollFlowResult
~CFifoSyncMQ	tfc_net_ipc_mq.cpp	/^CFifoSyncMQ::~CFifoSyncMQ(){}$/;"	f	class:CFifoSyncMQ
~CSemLockMQ	tfc_net_ipc_mq.cpp	/^CSemLockMQ::~CSemLockMQ() {$/;"	f	class:CSemLockMQ
~CShmMQ	tfc_net_ipc_mq.cpp	/^CShmMQ::~CShmMQ(){}$/;"	f	class:CShmMQ
~CSocketTCP	tfc_net_socket_tcp.h	/^			~CSocketTCP(){if (_close_protect)close();}$/;"	f	class:tfc::net::CSocketTCP
